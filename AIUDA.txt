########### multiplica matriz#####
package main

import (
    "fmt"
)

const TH = 4
var ch chan bool

func matMul(a, b [][]float64) [][]float64 {
    na, ma := len(a), len(a[0])
    nb, mb := len(b), len(b[0])
    if (ma != nb) {
        return nil
    }
    c := make([][]float64, na)
    for i := range c {
        c[i] = make([]float64, mb)
    }
    for i := 0; i < na; i++ {
        for j := 0; j < mb; j++ {
            go func(i, j int) {
                sum := 0.
                for k := 0; k < ma; k++ {
                    sum += a[i][k] * b[k][j]
                }
                c[i][j] = sum
                ch <- true
            }(i, j)
        }
    }
    for i := 0; i < na; i++ {
        for j := 0; j < mb; j++ {
            <-ch
        }
    }
    return c
}

func matMul2(a, b [][]float64) [][]float64 {
    na, ma := len(a), len(a[0])
    nb, mb := len(b), len(b[0])
    if (ma != nb) {
        return nil
    }
    c := make([][]float64, na)
    for i := range c {
        c[i] = make([]float64, mb)
    }
    for th := 0; th < TH; th++ {
        go func(si0 int){
            for si := si0; si < na*mb; si += TH {
                i, j := si / mb, si % mb
                sum := 0.
                for k := 0; k < ma; k++ {
                    sum += a[i][k] * b[k][j]
                }
                c[i][j] = sum
            }
            ch <- true
        }(th)
    }
    for th := 0; th < TH; th++ {
        <-ch
    }
    return c
}

func main() {
    a := [][]float64 {{4, 3, 1, 2},
                      {5, 1, 3, 4},
                      {2, 2, 1, 3}}
    b := [][]float64 {{5, 5, 5},
                      {2, 1, 3},
                      {4, 2, 2},
                      {3, 2, 2}}
    ch = make(chan bool)
    c := matMul(a, b)
    fmt.Println(c)
    c2 := matMul2(a, b)
    fmt.Println(c2)
}
############# filosofo
package main

import (
    "fmt"
)

type Semaphore chan bool

func (s Semaphore) Wait() {
    s<- true
}
func (s Semaphore) Signal() {
    <-s
}

const N = 5
var fork []Semaphore
var room Semaphore
var end chan bool

func philosopher(id int) {
    izq := id
    der := (id+1) % N
    for i := 0; i < 10; i++ {
        fmt.Printf("Filósofo %d pensando\n", id)
        room.Wait()
        fork[izq].Wait()
        fork[der].Wait()
        fmt.Printf("Filósofo %d comiendo\n", id)
        fork[izq].Signal()
        fork[der].Signal()
        room.Signal()
    }
    end<- true
}

func main() {
    fork = make([]Semaphore, N)
    room = make(Semaphore, N-1)
    end = make(chan bool)
    for i := 0; i < N; i++ {
        fork[i] = make(Semaphore, 1)
    }
    for i := 0; i < N; i++ {
        go philosopher(i)
    }
    for i := 0; i < N; i++ {
        <-end
    }
}

############ MAX bloques
package main

import (
    "fmt"
    "math"
)

var end chan int

func max(s []float64) float64 {
    const h = 4
    b := int(math.Ceil(float64(len(s)) / float64(h)))

    m := make([]float64, h)

    for i := 0; i < h; i++ {
        ini := i * b
        fin := (i + 1) * b
        go func(idx, ini, fin int) {
            m[idx] = s[idx]
            for j := ini; j < fin && j < len(s); j++ {
                if s[j] > m[idx] {
                    m[idx] = s[j]
                }
            }
            end <- 5
        }(i, ini, fin)
    }

    for i := 0; i < h; i++ {
        <-end
    }

    maxi := m[0]
    for _, v := range m {
        if v > maxi {
            maxi = v
        }
    }

    return maxi
}

func main() {
    end = make(chan int, 1)
    a := []float64{1, 6, 43, 6, 8, 43, 6, 35, 7, 94}
    fmt.Println(max(a))
}
#############  PI RR
package main

import (
    "fmt"
    "time"
)

const N = 100000000
const TH = 4

var ch chan float64

func calcPi() float64 {
    step := 1.0 / N

    for i := 0; i < TH; i++ {
        go func(idx int) {
            sum := 0.0
            for k := idx; k < N; k += TH {
                x := (float64(k) + 0.5) * step
                sum += 4.0 / (1.0 + x*x)
            }
            ch <- sum * step
        }(i)
    }
    pi := 0.0
    for i := 0; i < TH; i++ {
        pi += <-ch
    }

    return pi
}

func main() {
    ch = make(chan float64)
    inicio := time.Now()
    fmt.Println(calcPi())
    fmt.Printf("Tiempo: %s\n", time.Since(inicio))
}

###### critico
package main

import (
    "fmt"
    "math/rand"
    "time"
)

func pausa() {
    t := rand.Intn(200) + 50
    time.Sleep(time.Nanosecond * time.Duration(t))

}

var turn int = 1

func P() {
    for i := 0; i < 10; i++ {
        fmt.Printf("P No critica 1\n")
        pausa()
        fmt.Printf("P No critica 2\n")
        pausa()
        fmt.Printf("P No critica 3\n")
        pausa()
        for turn != 1 {
            pausa()
        }
        fmt.Printf("P critica 1\n")
        pausa()
        fmt.Printf("P critica 2\n")
        pausa()
        fmt.Printf("P critica 3\n")
        pausa()

        turn = 2
    }
    end <- true
}

func Q() {

    for i := 0; i < 10; i++ {
        fmt.Printf("\tQ No critica 1\n")
        pausa()
        fmt.Printf("\tQ No critica 2\n")
        pausa()
        fmt.Printf("\tQ No critica 3\n")
        pausa()
        for turn != 2 {
            pausa()
        }
        fmt.Printf("\tQ critica 1\n")
        pausa()
        fmt.Printf("\tQ critica 2\n")
        pausa()
        fmt.Printf("\tQ critica 3\n")
        pausa()
        turn = 2
    }
}

var end chan bool

func main() {
    end = make(chan bool)
    go P()
    go Q()
    <-end
    <-end
}
